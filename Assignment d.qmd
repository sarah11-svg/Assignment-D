---
title: "Assignment D"
format: html
editor: visual
---

### 3.2.5

```{r}
# Question 1 
# install.packages("nycflights13")
library(nycflights13)
library(dplyr)

# 1.
flights |>
  filter(arr_delay >= 120)
# 2.
flights |>
  filter(dest == "IAH" | dest == "HOU")
# 3.
flights |>
  filter(carrier == "UA" | carrier == "AA" | carrier == "DL")
# 4.
flights |>
  filter(month == 7 | month == 8 | month == 9)
# 5.
flights |>
  filter(arr_delay > 120, dep_delay <= 0)
# 6.
flights |>
  filter(dep_delay >= 60, dep_delay - arr_delay > 30)
```

```{r}
# Question 4
n_days <- flights |>
  distinct(year, month, day) |>
  nrow()

n_days
```

```{r}
# Question 5
flights |>
  filter(distance == max(distance, na.rm = TRUE))

flights |>
  filter(distance == min(distance, na.rm = TRUE))
```

### 3.3.5

```{r}
# Question 1
flights |>
  select(dep_time, sched_dep_time, dep_delay) |>
  head(10)
# I expect dep_delay is the difference between dep_time and sched_dep_time.
```

```{r}
# Question 4
variables <- c("year", "month", "day", "dep_delay", "arr_delay")

flights |>
  select(any_of(variables))
# any_of() helps you find out the existing columns and skips the error one.
```

### 3.5.7

```{r}
# Question 1
flights |>
  group_by(carrier) |>
  summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) |>
  arrange(desc(avg_delay))
# F9 has the worst average delays.

# We cannot disentagle the effects of bad airports vs. bad carriers because they are entagled.
```

```{r}
# Question 2
flights |>
  group_by(dest) |>
  slice_max(dep_delay, n = 1, with_ties = FALSE) |>
  arrange(desc(dep_delay))
# The worst departure delay is 1301 minutes.
```

```{r}
# Question 4
df <- tibble(x = 1:10)

slice_min(df, x, n = 4)

slice_min(df, x, n = -4)
# A negative n to slice_min will drop the lowest n numbers from dataset.
```

```{r}
# Question 6
df <- tibble(
  x = 1:5,
  y = c("a", "b", "a", "a", "b"),
  z = c("K", "K", "L", "L", "K")
)
# (a)
# The data will be grouped by y
df |>
  group_by(y)
# group_by() doesn't change the data frame.

# (b)
# arrange() will range letters alphabetically, and other rows will change accordingly. 
df |>
  arrange(y)
# group_by() doesn't swap columns but arrange() does.

# (c)
# This will calculate the mean of y.
df |>
  group_by(y) |>
  summarize(mean_x = mean(x))
# This calculate the mean of two elements in b. The pipeline groups the data by y, and calculate the average value of x.

# (d)
# This means the dataset grouped by both y and z to calculate the mean values.
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))
# The pipeline groups by both y and z, computes the mean of x.

# (e)
# This data will not be grouped by any letter.
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x), .groups = "drop")
# part (d) is grouped by y, but (e) isn't grouped by any letter. The pipeline ouput the same (y,z) means.

# (f)
# This will summarize the data in (y,z).
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))
# This pipeline collapsed the data.

# This will not summarize the data in (y,z).
df |>
  group_by(y, z) |>
  mutate(mean_x = mean(x))
# This pipeline showed the full data in (y,z) without collapsing like summarize().
```
